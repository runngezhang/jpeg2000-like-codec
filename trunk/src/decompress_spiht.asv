function decompress_spiht(file_in, img_out)
% SPIHT-Based Image Decompression
%
%  decompress_spiht(file_in, img_out)
%
% Input arguments ([]s are optional):
%  file_in (string): path to compressed file to be docompressed
%  img_out (string): path to decompressed image file
%
% Uses: iezw.m, ihuffman.m arith06.m, WaveUtilities/IWaveletTransform2D.m
%
% Author: Naotoshi Seo <sonots(at)umd.edu>
% Date  : April 2007

% read file
eval(sprintf('load %s -mat', file_in));
%whos


[decoded level] = dSPIHT(encoded, bits);

% Initialization
X = zeros(N);
T = T0;
scan = ezw_mortonorder(N);
num_pass = length(codewords_sigs);
% decoding
for i=1:num_pass
    fprintf('pass %d ...\n', i);
    % Aritmetic decoding, Copyright (c) 1999-2001.  Karl Skretting.
%     disp('Arithmetic decoding ...');
%     tic;
%     xc = cell(2, 1);
%     xc = arith06(arithmetic{i});
%     stream = xc{1}';
%     huffman_sigs{i} = uint8(stream(1:len_arithmetic(i)));
%     huffman_refs{i} = uint8(stream(len_arithmetic(i):end));
%     toc;
    
    disp('Huffman decoding ...');
    tic;
    sigmaps{i} = ihuffman(huffman_sigs{i}, codewords_sigs{i}, pad_sigs{i});
    refmaps{i} = ihuffman(huffman_refs{i}, codewords_refs{i}, pad_refs{i});
    toc
    
    disp('ezw_decoding ...');
    tic
    X = iezw_dominantpass(X, sigmaps{i}, T, scan);
    X = iezw_subordinatepass(X, refmaps{i}, T, scan);
    toc
    
    T = T/2;

    % for testing
    eval(sprintf('save %s.%02dof%02d X -mat', file_in, i, num_pass));
end
% Inverse Wavelet
addpath matlabPyrTools/
addpath matlabPyrTools/MEX/
I = invwave_transform_qmf(X,5); % qmf5
% I = invwave_transform(X); % haar

% add DC coponent
I = I + dc;
I = uint8(I);

% Save
imwrite(I, img_out);
end

