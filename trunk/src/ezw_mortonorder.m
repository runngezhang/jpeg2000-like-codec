function scan = ezw_mortonorder(N)% Generate EZW Mortion Scan order%%  scan = ezw_mortonorder(n)%% Input arguments ([]s are optional):%  N  (scalar) matrix size of to be scanned (for both row and column). %   Multiples of 2. %% Output arguments ([]s are optional):%  scan  (matrix) of size N^2x2. First column contains the appropriate row%   indices and the second column contains the column indices of scanned%   matrix. Row indicies imply scanned orders. % % Eexample)% scan = ezw_mortonorder(4)% scan =% %      1     1%      1     2%      2     1%      2     2%      1     3%      1     4%      2     3%      2     4%      3     1%      3     2%      4     1%      4     2%      3     3%      3     4%      4     3%      4     4%% Author: Naotoshi Seo <sonots(at)umd.edu>% Date  : April 2007% Input Argument Checkif mod(log2(N), 1) ~= 0    error('The size N must be a multiple of 2.');end% Generate EZW Morton Scan order matrix such as (for N = 4)% A =%      1     2     5     6%      3     4     7     8%      9    10    13    14%     11    12    15    16A = [1 2; 3 4];for i=pow2(1:log2(N)-1)    A = [A A+i^2; A+i^2*2 A+i^2*3];end% Convert into [row col] formfor i=1:N    for j=1:N        scan(A(i,j), :) = [i j];    endendend% Another Tricky Way% pos = [0:(n*n)-1];% bits = log2(n*n); % number of bits needed to represent position% bin = dec2bin(pos(:),bits) % convert position to binary% % odd bits represent row number% % even bits represent column number% scan = [bin2dec(bin(:,1:2:bits-1)), bin2dec(bin(:,2:2:bits))]+1